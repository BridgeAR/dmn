var fs = require('fs-extra'),
    path = require('path'),
    du = require('du'),
    globby = require('globby'),
    Q = require('q'),
    targets = require('./targets'),
    cli = require('./cli');


function parseIgnoreFile(ignoreFile) {
    return Q

        .nfcall(fs.ensureFile, ignoreFile.path)

        .then(function () {
            return Q.nfcall(fs.readFile, ignoreFile.path);
        })

        .then(function (content) {
            //NOTE: yep, so selfish...
            ignoreFile.content = content.toString() ||
                                 '# Generated by dmn (https://github.com/inikulin/dmn)';

            ignoreFile.patterns = ignoreFile.content
                .replace(/\r\n?/g, '\n')
                .split('\n')
                .map(function (str) {
                    return str.trim();
                })
                .filter(function (str) {
                    //NOTE: remove empty strings and comments
                    return str && str.indexOf('#') !== 0;
                });
        });
}

function findPatternsToAdd(projectDir, ignoreFile) {
    var patternsToAdd = [];

    var globPromises = targets.map(function (pattern) {
        return Q

            .nfcall(globby, pattern, {cwd: projectDir})

            .then(function (files) {
                //NOTE: since Win FS is case insensitive we will have duplicate patterns
                //which differ only by case (e.g. 'Gulpfile.js' and 'gulpfile.js').
                //There is no simple way to get actual case of filename on Windows,
                //so we just include both matches. It will lead to additional entry if
                //.npmignore if it was generated on Win, but this approach is safe in
                //terms of cross-platform use.
                if (files.length)
                    patternsToAdd.push(pattern);
            });
    });

    return Q

        .all(globPromises)

        .then(function () {
            patternsToAdd = patternsToAdd
                //NOTE: skip already ignored patterns and patterns which should not be ignored
                .filter(function (pattern) {
                    return ignoreFile.patterns.indexOf(pattern) === -1 &&
                           ignoreFile.patterns.indexOf('!' + pattern) === -1;
                })

                //NOTE: sort case insensitively. This make sense for Win, so e.g. Makefile
                //and MAKEFILE will be near each other in the list. For this we sort twice:
                //first to get the right order (upper cased first) of the patterns
                //for the second pass.
                .sort()
                .sort(function (pattern1, pattern2) {
                    pattern1 = pattern1.toLowerCase();
                    pattern2 = pattern2.toLowerCase();

                    if (pattern1 === pattern2)
                        return 0;

                    return pattern1 > pattern2 ? 1 : -1;
                });

            return patternsToAdd;
        });
}

function savePatterns(ignoreFile, patternsToAdd) {
    ignoreFile.content += '\r\n\r\n' + patternsToAdd.join('\r\n');

    return Q

        .nfcall(fs.writeFile, ignoreFile.path, ignoreFile.content)

        .then(function () {
            cli.ok('.npmignore file was updated.');

            return 'OK: saved';
        });
}

function confirmSave(ignoreFile, patternsToAdd) {
    return Q

        .Promise(function (done) {
            cli.confirm('Save?', done);
        })

        .then(function (yes) {
            if (yes)
                return savePatterns(ignoreFile, patternsToAdd);

            cli.ok('.npmignore file update was canceled.');

            return 'OK: canceled';
        });
}

//API
module.exports = function (projectDir, options) {
    var ignoreFile = {
        path: path.join(projectDir, './.npmignore'),
        content: '',
        patterns: []
    };

    cli.info('Analyzing project...').spin();

    return parseIgnoreFile(ignoreFile)

        .then(function () {
            return findPatternsToAdd(projectDir, ignoreFile);
        })

        .then(function (patternsToAdd) {
            if (!patternsToAdd.length) {
                cli.ok('Unignored patterns was not found. Your .npmignore file is already perfect.');

                return 'OK: already-perfect';
            }

            cli.info('Following patterns will be added to .npmignore file:');
            cli.list(patternsToAdd);

            if (options.force)
                return savePatterns(ignoreFile, patternsToAdd);

            return confirmSave(ignoreFile, patternsToAdd);
        });
};

